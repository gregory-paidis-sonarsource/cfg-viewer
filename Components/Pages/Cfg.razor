@page "/cfg"
@using VisualCfg.BigBrain
@rendermode InteractiveServer
@inject IJSRuntime JS

<PageTitle>VisualCFG</PageTitle>

<h1>Second best tab after "Weather"</h1>

<br />
<div class="container-fluid">
    <div class="row">
        <div class="col-lg-6">
            <h4>C#</h4>
            <StandaloneCodeEditor Id="my-editor-instance-id" ConstructionOptions="EditorConstructionOptions" OnDidChangeModelContent="EditorDidChangeModelContent" />
        </div>
        <div class="col-lg-6">
            <h4>CFG</h4>
            @* <textarea class="form-control" rows="10" placeholder="enter text here"></textarea> *@
            <div id="graphContainer"></div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12">
            <h4>Diagnostics</h4>
            <textarea @bind="diagnostics" class="form-control" rows="5" placeholder="No diagnostics raised. Good work!"></textarea>
        </div>
    </div>
</div>

@code {
    private string codeSnippet;
    private string diagnostics = string.Empty;
    private StandaloneCodeEditor myEditor;

    private async void CodeSnippetChanged(ChangeEventArgs args)
    {
        codeSnippet = args.Value.ToString();
        Console.WriteLine($"Code snippet changed to:{System.Environment.NewLine}{codeSnippet}");
        var either = BigBrain.Compiler.CompileCfg(codeSnippet);

        if (either.HasResult)
        {
            await JS.InvokeVoidAsync("d3GraphInterop", "graphContainer", either.Result);
        }
        else
        {
            diagnostics = either.Error.ToPrettyString();
        }
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        myEditor = editor;
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "csharp",
                Value = "int i = 42;"
            };
    }

    private async Task EditorDidChangeModelContent(ModelContentChangedEvent eventArgs)
    {
        CodeSnippetChanged(new ChangeEventArgs { Value = await myEditor.GetValue() });
    }
}
